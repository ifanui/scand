import org.jenkinsci.plugins.pipeline.modeldefinition.Utils

properties([
    parameters([
        string(
            name: 'GIT_BRANCH',
            defaultValue: 'develop',
            description: 'Branch for application'
        ),
        string(
            name: 'GIT_REPO',
            defaultValue: '',
            description: 'Repo for application'
        ),
        string(
            name: 'APP',
            defaultValue: '',
            description: 'Application name'
        ),
        booleanParam(
            name: 'DEPLOY_APP',
            defaultValue: false,
            description: "Deploy application to k8s"
        ),
        string(
            name: 'NODE',
            defaultValue: env.DEFAULT_DOCKER_SLAVE,
            description: "NODE - name of Jenkins node for building docker image"
        )
    ]),
    [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '10', artifactNumToKeepStr: '10', daysToKeepStr: '', numToKeepStr: '10']]
])

defaults = [
    registryHost: "127.0.0.1:30400/"
]

runtime = [
    tag: null,
    imageName: null,
    message: null
]

node(params.NODE){
    stage('Prepare steps') {
        cleanWs()
        currentBuild.displayName = "#${BUILD_NUMBER} ${env.GIT_BRANCH}"
        wrap([$class: 'BuildUser']) {
            currentBuild.description = "Managed by ${env.BUILD_USER_ID ?: 'jenkins'}"
        }
    }
    stage('Checkout from Git') {
            checkout scm: [
                $class           : 'GitSCM',
                branches         : [[name: params.GIT_BRANCH]],
                extensions       : [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true, timeout: 30]],
                userRemoteConfigs: [[
                    credentialsId: env.GIT_CREDS,
                    url          : params.GIT_REPO
                ]]
            ]
            sh "git rev-parse --short HEAD > commit-id"
            runtime.tag = readFile('commit-id').replace("\n", "").replace("\r", "")
            runtime.imageName = "${defaults.registryHost}${params.APP}:${runtime.tag}"
    }
    stage('Build docker image') {
        sh "docker build -t ${runtime.imageName} -f ${env.WORKSPACE}/applications/Dockerfile ."
        echo 'Build docker image was successfully'
    }
    stage('Push image to registry') {
        sh "docker push ${runtime.imageName}"
    }
    stage('Deploy') {
        if (params.DEPLOY_APP) {
            echo 'Deploy started to k8s'
            kubernetesDeploy configs: "applications/${params.APP}/k8s/*.yaml", kubeconfigId: "${params.APP}_kubeconfig"
        }  else {
        Utils.markStageSkippedForConditional('Deploy was skipped')
        }
    }
    stage('Notify') {
        if (params.DEPLOY_APP) {
            echo "Send for user ${env.BUILD_USER_ID} mail"
            runtime.message = "!!!Deploy application ${params.APP} was successfull, please checking!!!"
            emailext (body: runtime.message, subject: "Deploy APP:${params.APP}", to: "${env.BUILD_USER_ID}@example.com")
        }  else {
            Utils.markStageSkippedForConditional('Notify was skipped')
        }
    }
}
